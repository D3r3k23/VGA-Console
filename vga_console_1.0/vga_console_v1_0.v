
//////////////////////////////////////////////////////////////////////////////////
//               Module partially generated by Vivado IP packager               //
//////////////////////////////////////////////////////////////////////////////////

module vga_console_v1_0
#(
	// Parameters of Axi Slave Bus Interface S_AXI
	parameter integer C_S_AXI_DATA_WIDTH = 32,
	parameter integer C_S_AXI_ADDR_WIDTH = 5
)(
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
        input wire clk_74M,
        input wire rst,
        input wire en_sseg_cursor,

        // SSEG ctrl
        output wire [3  : 0] sseg_dig_en,
        output wire [3  : 0] sseg_dp_en,
        output wire [13 : 0] sseg_num,

        // VGA output signals
        output wire [3 : 0] R,
        output wire [3 : 0] G,
        output wire [3 : 0] B,

        output wire hsync,
        output wire vsync,
        output wire vid_active,

        output wire new_frame,
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

	// Ports of Axi Slave Bus Interface S_AXI
	input wire  s_axi_aclk,
	input wire  s_axi_aresetn,
	input wire [C_S_AXI_ADDR_WIDTH-1 : 0] s_axi_awaddr,
	input wire [2 : 0] s_axi_awprot,
	input wire  s_axi_awvalid,
	output wire  s_axi_awready,
	input wire [C_S_AXI_DATA_WIDTH-1 : 0] s_axi_wdata,
	input wire [(C_S_AXI_DATA_WIDTH/8)-1 : 0] s_axi_wstrb,
	input wire  s_axi_wvalid,
	output wire  s_axi_wready,
	output wire [1 : 0] s_axi_bresp,
	output wire  s_axi_bvalid,
	input wire  s_axi_bready,
	input wire [C_S_AXI_ADDR_WIDTH-1 : 0] s_axi_araddr,
	input wire [2 : 0] s_axi_arprot,
	input wire  s_axi_arvalid,
	output wire  s_axi_arready,
	output wire [C_S_AXI_DATA_WIDTH-1 : 0] s_axi_rdata,
	output wire [1 : 0] s_axi_rresp,
	output wire  s_axi_rvalid,
	input wire  s_axi_rready
);

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
    wire [2  : 0] CONS_CTRL;
    wire [23 : 0] CURS_LOC;
    wire [7  : 0] CHAR_SET;
    wire [11 : 0] CHAR_COLOR;
    wire [11 : 0] BACK_COLOR;
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

// Instantiation of Axi Bus Interface S_AXI
vga_console_v1_0_S_AXI # ( 
	.C_S_AXI_DATA_WIDTH(C_S_AXI_DATA_WIDTH),
	.C_S_AXI_ADDR_WIDTH(C_S_AXI_ADDR_WIDTH)
) vga_console_v1_0_S_AXI_inst (
	.S_AXI_ACLK(s_axi_aclk),
	.S_AXI_ARESETN(s_axi_aresetn),
	.S_AXI_AWADDR(s_axi_awaddr),
	.S_AXI_AWPROT(s_axi_awprot),
	.S_AXI_AWVALID(s_axi_awvalid),
	.S_AXI_AWREADY(s_axi_awready),
	.S_AXI_WDATA(s_axi_wdata),
	.S_AXI_WSTRB(s_axi_wstrb),
	.S_AXI_WVALID(s_axi_wvalid),
	.S_AXI_WREADY(s_axi_wready),
	.S_AXI_BRESP(s_axi_bresp),
	.S_AXI_BVALID(s_axi_bvalid),
	.S_AXI_BREADY(s_axi_bready),
	.S_AXI_ARADDR(s_axi_araddr),
	.S_AXI_ARPROT(s_axi_arprot),
	.S_AXI_ARVALID(s_axi_arvalid),
	.S_AXI_ARREADY(s_axi_arready),
	.S_AXI_RDATA(s_axi_rdata),
	.S_AXI_RRESP(s_axi_rresp),
	.S_AXI_RVALID(s_axi_rvalid),
	.S_AXI_RREADY(s_axi_rready),

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
        .CONS_CTRL  ( CONS_CTRL  ), // [2]: w_char | [1]: disp_en | [0]: disp_clr
        .CURS_LOC   ( CURS_LOC   ), // [X, Y]
        .CHAR_SET   ( CHAR_SET   ), // 8 bit ASCII
        .CHAR_COLOR ( CHAR_COLOR ), // 4 bit RGB
        .BACK_COLOR ( BACK_COLOR )  // 4 bit RGB
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
);

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

    // Slave register decoding
    wire disp_clr = CONS_CTRL[0];
    wire disp_en  = CONS_CTRL[1];
    wire w_char   = CONS_CTRL[2];

    wire [11 : 0] cursor_x = CURS_LOC[23 : 12];
    wire [11 : 0] cursor_y = CURS_LOC[11 :  0];

    // SSEG ctrl
    assign sseg_dig_en = {4{en_sseg_cursor}};
    assign sseg_dp_en  = 4'b0100;
    assign sseg_num    = (100 * cursor_x) + cursor_y;


    wire [11 : 0] pix_x, pix_y;

    wire [7 : 0] char_array_x = (pix_x + 1) / 16; // Shift by 1 pixel for char ROM read
    wire [7 : 0] char_array_y = pix_y / 16;

    wire [7  : 0] display_char;
    wire [11 : 0] display_char_color;


    char_array #(
        .WIDTH  ( 80 ),
        .HEIGHT ( 45 ))
    char_memory
    (
        // Ctrl
        .clk   ( s_axi_aclk     ),
        .rst   ( rst | disp_clr ),
        .w_en  ( w_char         ),
        
        // Write addr
        .w_pos_x ( cursor_x ),
        .w_pos_y ( cursor_y ),

        // Read addr
        .r_pos_x ( char_array_x ),
        .r_pos_y ( char_array_y ),

        // Write data
        .w_char_data  ( CHAR_SET   ),
        .w_color_data ( CHAR_COLOR ),

        // Read data
        .r_char_data  ( display_char       ),
        .r_color_data ( display_char_color )
    );

    vga_controller vga_controller_inst
    (
        // Inputs
	    .pix_clk ( clk_74M  ),
	    .rst     ( rst      ),
	    .en      ( disp_en  ),

        .char       ( display_char       ),
        .char_color ( display_char_color ),
        .back_color ( BACK_COLOR         ),

        // Outputs
        .pix_x ( pix_x ),
        .pix_y ( pix_y ),

        .R ( R ),
        .G ( G ),
        .B ( B ),

        .hsync      ( hsync      ),
        .vsync      ( vsync      ),
        .vid_active ( vid_active ),

        .new_frame ( new_frame )
    );
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

endmodule // vga_console_v1_0
